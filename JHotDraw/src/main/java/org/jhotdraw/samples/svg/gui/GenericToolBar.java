/*
 * @(#)StrokeToolBar.java  1.2  2008-05-23
 *
 * Copyright (c) 2007-2008 by the original authors of JHotDraw
 * and all its contributors.
 * All rights reserved.
 *
 * The copyright of this software is owned by the authors and  
 * contributors of the JHotDraw project ("the copyright holders").  
 * You may not use, copy or modify this software, except in  
 * accordance with the license agreement you entered into with  
 * the copyright holders. For details see accompanying license terms. 
 */
package org.jhotdraw.samples.svg.gui;

import dk.sdu.mmmi.featuretracer.lib.FeatureEntryPoint;
import org.jhotdraw.text.JavaNumberFormatter;
import javax.swing.border.*;
import org.jhotdraw.gui.*;
import org.jhotdraw.gui.plaf.palette.*;
import org.jhotdraw.util.*;
import java.awt.*;
import java.util.HashMap;
import java.util.Map;
import javax.swing.*;
import static javax.swing.SwingConstants.SOUTH_EAST;
import javax.swing.plaf.SliderUI;
import org.jhotdraw.app.JHotDrawFeatures;
import org.jhotdraw.draw.*;
import org.jhotdraw.draw.action.*;
import org.jhotdraw.text.ColorFormatter;
import static org.jhotdraw.samples.svg.SVGAttributeKeys.*;
import org.jhotdraw.samples.svg.gui.buttons.StrokeColorToolBarElement;
import org.jhotdraw.samples.svg.gui.buttons.CompositeToolBarElement;
import org.jhotdraw.samples.svg.gui.buttons.ToolBarElement;

/**
 * StrokeToolBar.
 *
 * @author Werner Randelshofer, Lomztein
 * @version 1.2 2008-05-23 Hide the toolbar if nothing is selected, and no
 * creation tool is active.
 * <br>1.1 2008-03-26 Don't draw button borders.
 * <br>1.0 May 1, 2007 Created.
 */
public class GenericToolBar extends AbstractToolBar {

    private SelectionComponentDisplayer displayer;

    protected String id;
    protected String nameLabel;
    protected String labelBundle;

    protected int defaultDisclosureState;

    protected ToolBarElement[] collections;

    public void init (String id, String nameLabel, String labelBundle, int defaultDisclosureState, ToolBarElement... collections) {
        this.id = id;
        this.nameLabel = nameLabel;
        this.labelBundle = labelBundle;
        this.defaultDisclosureState = defaultDisclosureState;
        this.collections = collections;
        
        ResourceBundleUtil labels = ResourceBundleUtil.getBundle(labelBundle);
        setName(labels.getString(nameLabel));
        setDisclosureStateCount(collections.length);
    }

    @Override
    public void setEditor(DrawingEditor newValue) {
        DrawingEditor oldValue = getEditor();
        if (displayer != null) {
            displayer.dispose();
            displayer = null;
        }
        super.setEditor(newValue);
        if (newValue != null) {
            displayer = new SelectionComponentDisplayer(editor, this);
        }
    }

    @Override
    protected JComponent createDisclosedComponent(int state) {
        return createComponent(state);
    }
    
    // This method exists exclusively to allow testing of the main behaviour of this class.
    public JComponent createComponent (int state) {
        JPanel panel = new JPanel();
        panel.setOpaque(false);
        panel.setBorder(new EmptyBorder(5, 5, 5, 8));
        ResourceBundleUtil labels = ResourceBundleUtil.getBundle("org.jhotdraw.samples.svg.Labels");

        GridBagLayout layout = new GridBagLayout();
        panel.setLayout(layout);

        if (isWithinRange(state)) {
            collections[state].AddTo(editor, panel, labels); // An empty state will add nothing, effectively "hiding" the toolbar.
        }
        
        return panel;
    }

    private boolean isWithinRange(int state) {
        return state >= 0 && state < collections.length;
    }

    @Override
    protected String getID() {
        return id;
    }

    @Override
    protected int getDefaultDisclosureState() {
        return defaultDisclosureState;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {
        setOpaque(false);
    }// </editor-fold>                        
    // Variables declaration - do not modify                     
    // End of variables declaration                   
}
